{"version":3,"file":"static/js/931.a845bdb3.chunk.js","mappings":"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","sources":["common/formatedSum.ts","components/Films/FilmDescription/messages.ts","components/Films/FilmDescription/index.tsx","components/Films/FilmDetailsPage/messages.ts","components/Films/FilmDetailsPage/index.tsx","components/Unknown/PersonCard/index.tsx","components/Unknown/MovieDetailsTabCast/messages.ts","components/Unknown/MovieDetailsTabCast/index.tsx","components/Unknown/ReviewCard/index.tsx","components/Unknown/MovieDetailsTabReviews/messages.ts","components/Unknown/MovieDetailsTabReviews/index.tsx","components/Unknown/MovieDetailsTabs/messages.ts","components/Unknown/MovieDetailsTabs/index.tsx"],"sourcesContent":["const formatedSum = (sum: number) => {\r\n  return sum.toString().replace(/(\\d)(?=(\\d{3})+(\\D|$))/g, \"$1 \");\r\n};\r\n\r\nexport default formatedSum;\r\n","import { defineMessages } from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n  duration: {\r\n    id: \"Film.FilmDescription.duration\",\r\n    defaultMessage: \"Duration\",\r\n  },\r\n  originalTitle: {\r\n    id: \"Film.FilmDescription.originalTitle\",\r\n    defaultMessage: \"Original title\",\r\n  },\r\n  worldPremiere: {\r\n    id: \"Film.FilmDescription.worldPremiere\",\r\n    defaultMessage: \"World premiere\",\r\n  },\r\n  budget: {\r\n    id: \"Film.FilmDescription.budget\",\r\n    defaultMessage: \"Budget\",\r\n  },\r\n  boxOffice: {\r\n    id: \"Film.FilmDescription.boxOffice\",\r\n    defaultMessage: \"Box office\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { useIntl } from \"react-intl\";\r\n\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport StarIcon from \"@mui/icons-material/Star\";\r\n\r\nimport formatedPosterImage from \"../../../common/formatedPosterImage\";\r\nimport formatedReleaseDate from \"../../../common/formatedReleaseDate\";\r\nimport formatedSum from \"../../../common/formatedSum\";\r\nimport { Movie } from \"../../../types\";\r\nimport messages from \"./messages\";\r\n\r\ntype FilmDescriptionProps = {\r\n  film: Movie;\r\n};\r\n\r\nconst FilmDescription: React.FC<FilmDescriptionProps> = ({ film }) => {\r\n  const intl = useIntl();\r\n\r\n  const releaseDate = formatedReleaseDate(film);\r\n  const {\r\n    title,\r\n    runtime,\r\n    original_title,\r\n    release_date,\r\n    budget,\r\n    revenue,\r\n    tagline,\r\n    vote_average,\r\n    homepage,\r\n    genres,\r\n    overview,\r\n  } = film;\r\n\r\n  const releaseYear = releaseDate && ` (${releaseDate})`;\r\n\r\n  const detailsElements = [\r\n    {\r\n      name: intl.formatMessage(messages.duration),\r\n      value: runtime ? runtime.toString() + \" min\" : null,\r\n    },\r\n    {\r\n      name: intl.formatMessage(messages.originalTitle),\r\n      value: original_title ?? null,\r\n    },\r\n\r\n    {\r\n      name: intl.formatMessage(messages.worldPremiere),\r\n      value: release_date ? format(new Date(release_date), \"PPP\") : null,\r\n    },\r\n    {\r\n      name: intl.formatMessage(messages.budget),\r\n      value: budget ? formatedSum(budget) + \"$\" : null,\r\n    },\r\n    {\r\n      name: intl.formatMessage(messages.boxOffice),\r\n      value: revenue ? formatedSum(revenue) + \"$\" : null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Grid container spacing={{ sm: 6, lg: 10 }}>\r\n      <Grid item sm={5} md={4}>\r\n        <img\r\n          src={formatedPosterImage(film.poster_path)}\r\n          alt={title}\r\n          width=\"100%\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item sm={7} md={8}>\r\n        <Box mb={6}>\r\n          <Typography variant=\"h4\">\r\n            {title}\r\n            {releaseYear}\r\n          </Typography>\r\n\r\n          {tagline && <Typography>{tagline}</Typography>}\r\n        </Box>\r\n\r\n        <Box display=\"flex\" alignItems=\"center\" mb={6}>\r\n          {homepage && (\r\n            <Box mr={4}>\r\n              <Chip\r\n                component={Link}\r\n                href={homepage}\r\n                target=\"_blank\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                label=\"Oficial page\"\r\n                clickable\r\n                color=\"primary\"\r\n              />\r\n            </Box>\r\n          )}\r\n          {vote_average && (\r\n            <Box display=\"flex\">\r\n              <StarIcon sx={{ fontSize: 22, color: \"#ffd700e6\" }} />\r\n              <Typography>{vote_average.toFixed(1)}</Typography>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n\r\n        <Box width=\"fit-content\" mb={6}>\r\n          {detailsElements.map((elem, index) =>\r\n            elem.value ? (\r\n              <Box\r\n                key={index}\r\n                pl={1}\r\n                ml={-1}\r\n                mb={4}\r\n                borderLeft=\"2px solid\"\r\n                borderColor=\"primary.main\"\r\n              >\r\n                <Typography display=\"inline\">{elem.name}: </Typography>\r\n                <Typography display=\"inline\" color=\"primary.main\">\r\n                  {elem.value}\r\n                </Typography>\r\n              </Box>\r\n            ) : null,\r\n          )}\r\n        </Box>\r\n\r\n        {genres && (\r\n          <Box display=\"flex\" mb={6}>\r\n            {genres.map((genre, index) => (\r\n              <Box key={genre.id} ml={index === 0 ? 0 : 1}>\r\n                <Chip label={genre.name} size=\"small\" color=\"primary\" />\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        )}\r\n\r\n        {overview && (\r\n          <Box pl={1} ml={-1} borderLeft=\"2px solid\" borderColor=\"primary.main\">\r\n            <Typography>{overview}</Typography>\r\n          </Box>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FilmDescription;\r\n","import { defineMessages } from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n  backButton: {\r\n    id: \"Film.FilmDetailsPage.backButton\",\r\n    defaultMessage: \"Back\",\r\n  },\r\n});\r\n","import React, { useMemo } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FilmDescription from \"../FilmDescription\";\r\nimport MovieDetailsTabs from \"../../Unknown/MovieDetailsTabs\";\r\nimport NotFoundPage from \"../../Unknown/NotFoundPage\";\r\nimport Loader from \"../../Unknown/Loader\";\r\n\r\nimport { useGetFilmByIdQuery } from \"../../../services/movieService\";\r\nimport messages from \"./messages\";\r\n\r\ntype FilmDetailsPageParams = {\r\n  movieId: string;\r\n};\r\n\r\nconst FilmDetailsPage: React.FC = () => {\r\n  const { movieId } = useParams() as FilmDetailsPageParams;\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const intl = useIntl();\r\n\r\n  const navigatePathname = useMemo(() => {\r\n    const state = location.state as { from: string };\r\n    if (state && state.from) {\r\n      return state.from;\r\n    }\r\n    return \"/\";\r\n  }, [location]);\r\n\r\n  const { data: film, isLoading, error } = useGetFilmByIdQuery(movieId);\r\n\r\n  const onClickBack = () => {\r\n    navigate(navigatePathname);\r\n  };\r\n\r\n  if (error) return <NotFoundPage />;\r\n\r\n  return (\r\n    <Box pt={18} pb={5} height=\"100%\" display=\"flex\" flexDirection=\"column\">\r\n      {isLoading && <Loader />}\r\n\r\n      {film && (\r\n        <Box>\r\n          <Box mb={5}>\r\n            <Button variant=\"outlined\" onClick={onClickBack}>\r\n              {intl.formatMessage(messages.backButton)}\r\n            </Button>\r\n          </Box>\r\n\r\n          <Box mb={5}>\r\n            <FilmDescription film={film} />\r\n          </Box>\r\n\r\n          <Box>\r\n            <MovieDetailsTabs type=\"movie\" movieId={movieId} />\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FilmDetailsPage;\r\n","import React from \"react\";\r\n\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\n\r\nimport formatedPosterImage from \"../../../common/formatedPosterImage\";\r\nimport { Actor } from \"../../../types\";\r\n\r\ninterface PersonCarsProps {\r\n  actor: Actor;\r\n}\r\n\r\nconst PersonCard: React.FC<PersonCarsProps> = ({ actor }) => {\r\n  return (\r\n    <Card elevation={0}>\r\n      <CardMedia\r\n        component=\"img\"\r\n        image={formatedPosterImage(actor.profile_path)}\r\n        alt={actor.name}\r\n        width=\"100%\"\r\n      />\r\n\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h6\">\r\n          {actor.name}\r\n        </Typography>\r\n\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {actor.character}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PersonCard;\r\n","import { defineMessages } from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n  noResultsText: {\r\n    id: \"Unknown.MovieDetailsTabCast.noResultsText\",\r\n    defaultMessage: \"No information about the cast\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { Navigation } from \"swiper\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/css\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport PersonCard from \"../PersonCard\";\r\nimport ArrowBackIosNewIcon from \"@mui/icons-material/ArrowBackIosNew\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport Loader from \"../Loader\";\r\n\r\nimport { useGetMovieCastQuery } from \"../../../services/movieService\";\r\nimport { MediaType } from \"../../../types\";\r\nimport messages from \"./messages\";\r\n\r\ninterface MovieDetailsTabCastProps {\r\n  type: MediaType;\r\n  movieId: string;\r\n}\r\n\r\nconst MovieDetailsTabCast: React.FC<MovieDetailsTabCastProps> = ({\r\n  movieId,\r\n  type,\r\n}) => {\r\n  const intl = useIntl();\r\n  const theme = useTheme();\r\n\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n\r\n  const { data, isLoading } = useGetMovieCastQuery({\r\n    movieId,\r\n    type,\r\n  });\r\n\r\n  const slidesPerView = () => {\r\n    if (isDesktop) return 5;\r\n    if (isMobile) return 3;\r\n    return 4;\r\n  };\r\n\r\n  return (\r\n    <Box pt={5}>\r\n      {isLoading && <Loader />}\r\n\r\n      {data && data.cast.length !== 0 ? (\r\n        <Box position=\"relative\">\r\n          <Swiper\r\n            spaceBetween={30}\r\n            slidesPerView={slidesPerView()}\r\n            navigation={{\r\n              prevEl: \".prev\",\r\n              nextEl: \".next\",\r\n            }}\r\n            modules={[Navigation]}\r\n          >\r\n            {data.cast.map((actor) => (\r\n              <SwiperSlide key={actor.id}>\r\n                <PersonCard actor={actor} />\r\n              </SwiperSlide>\r\n            ))}\r\n\r\n            {data.cast.length > slidesPerView() && (\r\n              <>\r\n                <Box position=\"absolute\" top=\"30%\" left={0} zIndex={1}>\r\n                  <IconButton className=\"prev\">\r\n                    <ArrowBackIosNewIcon fontSize=\"large\" color=\"primary\" />\r\n                  </IconButton>\r\n                </Box>\r\n\r\n                <Box position=\"absolute\" top=\"30%\" right={0} zIndex={1}>\r\n                  <IconButton className=\"next\">\r\n                    <ArrowForwardIosIcon fontSize=\"large\" color=\"primary\" />\r\n                  </IconButton>\r\n                </Box>\r\n              </>\r\n            )}\r\n          </Swiper>\r\n        </Box>\r\n      ) : (\r\n        <Typography>{intl.formatMessage(messages.noResultsText)}</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsTabCast;\r\n","import React from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\n\r\nimport formatedPosterImage from \"../../../common/formatedPosterImage\";\r\nimport { Review } from \"../../../types\";\r\n\r\ninterface ReviewCarsProps {\r\n  review: Review;\r\n}\r\n\r\nconst ReviewCard: React.FC<ReviewCarsProps> = ({ review }) => {\r\n  const showUserName = review.author !== review.author_details.username;\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" mb={5}>\r\n        <Avatar\r\n          src={formatedPosterImage(review.author_details.avatar_path)}\r\n          alt={review.author}\r\n        />\r\n        <Box>\r\n          <Typography ml={3}>{review.author}</Typography>\r\n          {showUserName && (\r\n            <Typography ml={3} variant=\"body2\" color=\"primary.main\">\r\n              {review.author_details.username}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box px={3}>\r\n        <Typography\r\n          sx={{\r\n            display: \"-webkit-box\",\r\n            overflow: \"hidden\",\r\n            WebkitBoxOrient: \"vertical\",\r\n            WebkitLineClamp: 10,\r\n          }}\r\n        >\r\n          {review.content}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ReviewCard;\r\n","import { defineMessages } from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n  noResultsText: {\r\n    id: \"Unknown.MovieDetailsTabReviews.noResultsText\",\r\n    defaultMessage: \"There are no reviews yet\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport ReviewCard from \"../ReviewCard\";\r\nimport Loader from \"../Loader\";\r\n\r\nimport { useGetMovieReviewsQuery } from \"../../../services/movieService\";\r\nimport { MediaType } from \"../../../types\";\r\nimport messages from \"./messages\";\r\n\r\ninterface MovieDetailsTabReviewsProps {\r\n  type: MediaType;\r\n  movieId: string;\r\n}\r\n\r\nconst MovieDetailsTabReviews: React.FC<MovieDetailsTabReviewsProps> = ({\r\n  movieId,\r\n  type,\r\n}) => {\r\n  const intl = useIntl();\r\n  const { data, isLoading } = useGetMovieReviewsQuery({\r\n    movieId,\r\n    type,\r\n  });\r\n\r\n  return (\r\n    <Box pt={5}>\r\n      {isLoading && <Loader />}\r\n\r\n      {data && data.results.length !== 0 ? (\r\n        data.results.map((review, index) => (\r\n          <Box\r\n            py={3}\r\n            borderTop={index === 0 ? \"none\" : \"1px solid\"}\r\n            borderColor=\"primary.main\"\r\n            key={review.id}\r\n          >\r\n            <ReviewCard review={review} />\r\n          </Box>\r\n        ))\r\n      ) : (\r\n        <Typography>{intl.formatMessage(messages.noResultsText)}</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsTabReviews;\r\n","import { defineMessages } from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n  castTabLabel: {\r\n    id: \"Unknown.MovieDetailsTabs.castTabLabel\",\r\n    defaultMessage: \"Cast\",\r\n  },\r\n  reviewsTabLabel: {\r\n    id: \"Unknown.MovieDetailsTabs.reviewsTabLabel\",\r\n    defaultMessage: \"Reviews\",\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport MovieDetailsTabCast from \"../MovieDetailsTabCast\";\r\nimport MovieDetailsTabReviews from \"../MovieDetailsTabReviews\";\r\n\r\nimport { MediaType } from \"../../../types\";\r\nimport messages from \"./messages\";\r\n\r\ninterface MovieDetailsTabsProps {\r\n  type: MediaType;\r\n  movieId: string;\r\n}\r\n\r\nconst MovieDetailsTabs: React.FC<MovieDetailsTabsProps> = ({\r\n  movieId,\r\n  type,\r\n}) => {\r\n  const [value, setValue] = useState(0);\r\n  const intl = useIntl();\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label={intl.formatMessage(messages.castTabLabel)} />\r\n          <Tab label={intl.formatMessage(messages.reviewsTabLabel)} />\r\n        </Tabs>\r\n      </Box>\r\n\r\n      {value === 0 && <MovieDetailsTabCast type={type} movieId={movieId} />}\r\n\r\n      {value === 1 && <MovieDetailsTabReviews type={type} movieId={movieId} />}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsTabs;\r\n"],"names":["sum","toString","replace","defineMessages","duration","id","defaultMessage","originalTitle","worldPremiere","budget","boxOffice","film","intl","useIntl","releaseDate","formatedReleaseDate","title","runtime","original_title","release_date","revenue","tagline","vote_average","homepage","genres","overview","releaseYear","detailsElements","name","formatMessage","messages","value","format","Date","formatedSum","Grid","container","spacing","sm","lg","item","md","src","formatedPosterImage","poster_path","alt","width","Box","mb","Typography","variant","display","alignItems","mr","Chip","component","Link","href","target","size","label","clickable","color","Star","sx","fontSize","toFixed","map","elem","index","pl","ml","borderLeft","borderColor","genre","backButton","movieId","useParams","navigate","useNavigate","location","useLocation","navigatePathname","useMemo","state","from","useGetFilmByIdQuery","data","isLoading","error","NotFoundPage","pt","pb","height","flexDirection","Loader","Button","onClick","MovieDetailsTabs","type","actor","Card","elevation","CardMedia","image","profile_path","CardContent","gutterBottom","character","noResultsText","theme","useTheme","isDesktop","useMediaQuery","breakpoints","up","isMobile","down","useGetMovieCastQuery","slidesPerView","cast","length","position","spaceBetween","navigation","prevEl","nextEl","modules","Navigation","top","left","zIndex","IconButton","className","ArrowBackIosNew","right","ArrowForwardIos","review","showUserName","author","author_details","username","Avatar","avatar_path","px","overflow","WebkitBoxOrient","WebkitLineClamp","content","useGetMovieReviewsQuery","results","py","borderTop","castTabLabel","reviewsTabLabel","useState","setValue","borderBottom","Tabs","onChange","event","newValue","Tab"],"sourceRoot":""}